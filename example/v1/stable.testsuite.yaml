apiVersion: apiextensions.k8s.io/v1 # Hack because controller-gen complains if we don't have this
name: "[Stable] Example API"
crd: 0000_50_stabletype-default.crd.yaml
tests:
  onCreate:
  - name: Should persist stable fields
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        stableField: "Allowed"
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        stableField: "Allowed"
  - name: Should not persist a tech preview field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        coolNewField: "Invalid"
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec: {}
  - name: With an EvolvingUnion, Should allow an empty enum value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: ""
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: ""
  - name: With an EvolvingUnion, Should allow a Stable enum value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: StableValue
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: StableValue
  - name: With an EvolvingUnion, Should not allow a TechPreview enum value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: TechPreviewOnlyValue
    expectedError: "spec.evolvingUnion.type: Unsupported value: \"TechPreviewOnlyValue\": supported values: \"\", \"StableValue\""
  - name: With an CEL validated Discrminated union, should allow an empty member with the empty type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
  - name: With an CEL validated Discrminated union, should allow an empty member with the empty type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
  - name: With an CEL validated Discrminated union, should allow a required member with the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          requiredMember: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          requiredMember: foo
  - name: With an CEL validated Discrminated union, should not allow omitting required member with the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
    expectedError: "Invalid value: \"object\": requiredMember is required when type is RequiredMember, and forbidden otherwise"
  - name: With an CEL validated Discrminated union, should not allow the required member without the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          requiredMember: foo
    expectedError: "Invalid value: \"object\": requiredMember is required when type is RequiredMember, and forbidden otherwise"
  - name: With an CEL validated Discrminated union, should not allow the optional member with the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          requiredMember: foo
          optionalMember: foo
    expectedError: "Invalid value: \"object\": optionalMember is forbidden when type is not OptionalMember"
  - name: With an CEL validated Discrminated union, should allow an optional member with the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          optionalMember: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          optionalMember: foo
  - name: With an CEL validated Discrminated union, should allow omitting the optional member with the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
  - name: With an CEL validated Discrminated union, should not allow the optional member without the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          optionalMember: foo
    expectedError: "Invalid value: \"object\": optionalMember is forbidden when type is not OptionalMember"
  - name: With an CEL validated Discrminated union, should not allow the required member with the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          requiredMember: foo
    expectedError: "Invalid value: \"object\": requiredMember is required when type is RequiredMember, and forbidden otherwise"
